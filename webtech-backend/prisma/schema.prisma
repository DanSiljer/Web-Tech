generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProductPrice {
  id                Int                @id @default(autoincrement())
  tabPrice          TabPrice           @relation(fields: [codTabPriceId], references: [id])
  codTabPriceId     String             @map("cod_tab_price_id") @db.Char(2)
  product           Product            @relation(fields: [productProduct], references: [product])
  productProduct    String             @unique @map("product") @db.Char(12)
  price1            Decimal            @map("price_1") @db.Money
  discountLimit     Decimal            @map("discount_limit") @db.Decimal(8, 5)
  discountPromotion Decimal            @map("discount_promotion") @db.Decimal(8, 5)
  priceLiquid       Decimal            @map("price_liquid") @db.Money
  updatedAt         DateTime           @updatedAt @map("updated_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  LogProductsPrice  LogProductsPrice[]
}

model TabPrice {
  id           String         @id @db.Char(2)
  tabPrice     String         @db.Char(12)
  ProductPrice ProductPrice[]
}

model Product {
  id               Int                @unique @default(autoincrement())
  name             String             @db.VarChar(100)
  office      String             @db.VarChar(1000)
  Department       String             @default("") @db.VarChar(15)
  updatedAt        DateTime           @updatedAt @map("updated_at")
  createdAt        DateTime           @default(now()) @map("created_at")
  ProductPrice     ProductPrice?
  LogProductsPrice LogProductsPrice[]
}

model LogProductsPriceField {
  id               Int                @id @default(autoincrement())
  field            String             @db.VarChar(50)
  updatedAt        DateTime           @updatedAt @map("updated_at")
  createdAt        DateTime           @default(now()) @map("created_at")
  LogProductsPrice LogProductsPrice[]
}

model LogProductsPrice {
  id                   Int                   @id @default(autoincrement())
  user                 User                  @relation(fields: [userId], references: [id])
  userId               Int                   @map("user_id")
  productPrice         ProductPrice          @relation(fields: [productPriceId], references: [id])
  productPriceId       Int                   @map("product_price_id")
  product              Product               @relation(fields: [productId], references: [product])
  productId            String                @map("product_id")
  logProductPriceField LogProductsPriceField @relation(fields: [alterFieldId], references: [id])
  alterFieldId         Int                   @map("alter_field_id")
  originalValue        Decimal               @map("original_value") @db.Decimal(14, 2)
  newValue             Decimal               @map("new_value") @db.Decimal(14, 2)
  updatedAt            DateTime              @updatedAt @map("updated_at")
  createdAt            DateTime              @default(now()) @map("created_at")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(200)
  email            String             @unique @db.VarChar(200)
  password         String             @db.VarChar(200)
  admin            String             @default("0") @db.Bit(1)
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  createdAt        DateTime           @default(now()) @map("created_at")
  deleted          Boolean            @default(false)
  LogProductsPrice LogProductsPrice[]
}
